////////////////////////////////////////////////////////////////////////////////
// lsp.h
////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "system.h"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline void LSP_MusicDriver_CIA_Start(const void* music, const void* bank)
{
	register const void* _music	ASM("a0") = music;
	register const void* _bank	ASM("a1") = bank;
	register void*		 _vbr	ASM("a2") = System_GetVBR();
	register bool		 _ntsc	ASM("d0") = false;

	asm volatile(
	"		move.l	%%a5,-(%%sp)				\n"
	"		jsr		LSP_MusicDriver_CIA_Start	\n"
	"		move.l	(%%sp)+,%%a5				\n"
	:
	"+a" (_music),
	"+a" (_bank),
	"+a" (_vbr),
	"+d" (_ntsc)
	:
	:
	REGS("d1", "d2", "a3", "a4", "a6"),
	"cc",
	"memory"
	);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline void LSP_MusicDriver_CIA_Stop()
{
	asm volatile(
	"		jsr		LSP_MusicDriver_CIA_Stop	\n"
	:
	:
	:
	"cc",
	"memory"
	);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline u16 LSP_MusicGetPos()
{
	register u16 pos ASM("d0");

	asm volatile(
	"		jsr		LSP_MusicGetPos	\n"
	:
	"=d" (pos)
	:
	:
	"cc",
	"memory"
	);

	return pos;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline void LSP_MusicSetPos(u16 pos)
{
	register u16 _pos ASM("d0") = pos;

	asm volatile(
	"		jsr		LSP_MusicSetPos	\n"
	:
	"+d" (_pos)
	:
	:
	REGS("d1", "a0", "a3"),
	"cc",
	"memory"
	);
}
