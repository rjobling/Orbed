////////////////////////////////////////////////////////////////////////////////
// winuaemem.h
////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "core.h"
#include "bigendian.h"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
typedef big_u32 uae_size_t;
typedef big_u32 uae_ptr;

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
struct Mem_Tag
{
	u32 label[2];
	uae_ptr self;
};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
struct WinUAEMem
{
	void* proc;		// WinUAE process handle.
	u8* base;		// WinUAE process base address.
	size_t size;	// WinUAE process region size;
	u8* buffer;		// Buffer with copy of WinUAE memory.
	Mem_Tag* tag;	// Location of tag in buffer.
};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool WinUAEMem_Aquire(WinUAEMem& mem, const char* label);
void WinUAEMem_Release(WinUAEMem& mem);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool WinUAEMem_Read(WinUAEMem& mem, void* p, size_t size);
bool WinUAEMem_Write(WinUAEMem& mem, const void* p, size_t size);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void* WinUAEMem_MakeHostPointer(WinUAEMem& mem, uae_ptr p);
uae_ptr WinUAEMem_MakeTargetPointer(WinUAEMem& mem, void* p);
