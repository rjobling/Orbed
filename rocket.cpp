////////////////////////////////////////////////////////////////////////////////
// rocket.cpp
////////////////////////////////////////////////////////////////////////////////

#include "rocket.h"
#include <vector>
#include "imgui\imgui.h"
#include "librocket\sync.h"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
static constexpr float kRowsPerSecond = 50.0f;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
struct RocketBool
{
	bool* p;
	const sync_track* track;
};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
struct RocketInt
{
	int* p;
	const sync_track* track;
	int low, high, mod;
};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
struct RocketFloat
{
	float* p;
	const sync_track* track;
	float low, high, mod;
};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
static sync_device* sDevice;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
static bool sIsPlaying = false;
static float sRowsPerSecond = kRowsPerSecond;
static float sCurrentRow = 0.0f;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
static std::vector<RocketBool> sBools;
static std::vector<RocketInt> sInts;
static std::vector<RocketFloat> sFloats;

////////////////////////////////////////////////////////////////////////////////
// Called when Rocket is paused/played specified by the flag.
////////////////////////////////////////////////////////////////////////////////
static void PauseCallback(void* data, int flag)
{
	unused(data);

	sIsPlaying = !flag;
}

////////////////////////////////////////////////////////////////////////////////
// Called when Rocket editor changes the row.
////////////////////////////////////////////////////////////////////////////////
static void SetRowCallback(void* data, int row)
{
	unused(data);

	sCurrentRow = (float) row;
}

////////////////////////////////////////////////////////////////////////////////
// Called when Rocket editor want to know if we are playing.
////////////////////////////////////////////////////////////////////////////////
static int IsPlayingCallback(void* data)
{
	unused(data);

	return sIsPlaying;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool Rocket_Init()
{
	if (sDevice == nullptr)
	{
		sDevice = sync_create_device("Orbed");
	}

	return (sDevice != nullptr);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Rocket_Deinit()
{
	sBools.clear();
	sInts.clear();
	sFloats.clear();

	if (sDevice != nullptr)
	{
		sync_destroy_device(sDevice);
		sDevice = nullptr;
	}
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool Rocket_Connect()
{
	assert_pointer(sDevice);

	if (sync_tcp_connect(sDevice, "localhost", SYNC_DEFAULT_PORT) == 0)
	{
		return true;
	}

	return false;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool Rocket_Update()
{
	ImGui::Text(sIsPlaying ? "Playing" : "Paused");
	ImGui::Text("Row:%5.2f", sCurrentRow);

	assert_pointer(sDevice);

	sync_cb callbacks = {
		.pause = PauseCallback,
		.set_row = SetRowCallback,
		.is_playing = IsPlayingCallback,
	};

	bool connected = (sync_update(sDevice, (int) floor(sCurrentRow), &callbacks, nullptr) == 0);

	if (connected)
	{
		size_t boolCount = sBools.size();
		for (int i = 0; i < boolCount; i++)
		{
			RocketBool& v = sBools[i];

			bool b = (sync_get_val(v.track, sCurrentRow) != 0.0);

			*v.p = b;
		}

		size_t intCount = sInts.size();
		for (int i = 0; i < intCount; i++)
		{
			RocketInt& v = sInts[i];

			int n = (int) sync_get_val(v.track, sCurrentRow);
			n = clamp(n, v.low, v.high);
			n = (v.mod != 0) ? (n % v.mod) : n;

			*v.p = n;
		}

		size_t floatCount = sFloats.size();
		for (int i = 0; i < floatCount; i++)
		{
			RocketFloat& v = sFloats[i];

			float f = (float) sync_get_val(v.track, sCurrentRow);
			f = clamp(f, v.low, v.high);
			f = (v.mod != 0.0f) ? fmodf(f, v.mod) : f;

			*v.p = f;
		}

		if (sIsPlaying)
		{
			sCurrentRow += sRowsPerSecond * ImGui::GetIO().DeltaTime;
		}
	}

	return connected;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
bool Rocket_IsPlaying()
{
	return sIsPlaying;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Rocket_SetPlaySpeed(float rowsPerSecond)
{
	sRowsPerSecond = rowsPerSecond;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
float Rocket_GetPlaySpeed()
{
	return sRowsPerSecond;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Rocket_SetRow(float row)
{
	sCurrentRow = row;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
float Rocket_GetRow()
{
	return sCurrentRow;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Rocket_Register(bool* p, const char* label)
{
	assert_pointer(sDevice);

	sBools.push_back({p, sync_get_track(sDevice, label)});
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Rocket_Unregister(bool* p)
{
	size_t count = sBools.size();
	for (int i = 0; i < count; i++)
	{
		if (sBools[i].p == p)
		{
			sBools.erase(sBools.begin() + i);
			count--;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Rocket_Register(int* p, const char* label, int low, int high, int mod)
{
	assert_pointer(sDevice);

	sInts.push_back({p, sync_get_track(sDevice, label), low, high, mod});
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Rocket_Unregister(int* p)
{
	size_t count = sInts.size();
	for (int i = 0; i < count; i++)
	{
		if (sInts[i].p == p)
		{
			sInts.erase(sInts.begin() + i);
			count--;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Rocket_Register(float* p, const char* label, float low, float high, float mod)
{
	assert_pointer(sDevice);

	sFloats.push_back({p, sync_get_track(sDevice, label), low, high, mod});
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Rocket_Unregister(float* p)
{
	size_t count = sFloats.size();
	for (int i = 0; i < count; i++)
	{
		if (sFloats[i].p == p)
		{
			sFloats.erase(sFloats.begin() + i);
			count--;
		}
	}
}
